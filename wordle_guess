#!/bin/bash
# A comand line wordle player, prints suggested word.
#
# wordle_guess <green letters> <yellow letters> <black letters>
#
# Uses sed to find matches to a green, yellow, black specification. The
# specification is three strings for the green, yellow, and black
# characters on the last wordle puzzle line. Examples:
#
# <green letters>   e.g., ..a.b if 3rd and 5th letters are green a and b
# <yellow letters>  e.g., .e.h  if 2nd and 4th letters are yellow e and h
# <black letters>   e.g., jks   if j, k, and s all are black
#
# Use a dot (.) as a place holder, as position is significant for green
# and yellow letters. A plain dot means no color character at that spot.
# 
# Saves the sed output of matching words in local file for next guess.
# 
# Proceeds to pick a guess from this output. Looks for a word that has
# the most characters in common with other possible matches.  Considers
# most common letters among the matches first. For each character finds
# matches with that letter. If some exist,  use the result for further
# pruning. Prints the final smallest subset.
# 
# Called without arguments, it scans a word list from the pre-New York
# Times version of wordle, saved as $BASH_SOURCE.dat, e.g.
# wordle_guess.dat. In this case the above algorithm for picking a
# guess suggests "arose" - an ok choice.

FULL_LIST=$BASH_SOURCE.dat # full list from old wordle site
WORD_LIST=wg_last          # local file holding last matches
MATCHES=$(mktemp)          # work copy of current scan


# get possible matches
test "$1" || rm -f $WORD_LIST # no args so new puzzle
test -s $WORD_LIST || cp $FULL_LIST $WORD_LIST # start with full list
{  # sed commands for wordle matching
    echo "/^${1:-.}/!d" # match green characters
    echo "/[${3:-.}]/d" # delete words with black characters
    dots='' # to specify position of yellow character
    for yellow in $(grep -o . <<<${2:-.}); do
        if test $yellow != '.'; then
            echo /$yellow/!d # delete lines without yellow
            echo /^$dots$yellow/d # delete words with yellow at same spot
        fi
        dots=$dots. # add dot to position
    done
} | sed -f - $WORD_LIST >$MATCHES
cp $MATCHES $WORD_LIST # save for next guess

# pick guess from list. first get letters in order most frequent first
letters=$(grep -o . $MATCHES | sort | uniq -c | sort -nr | tr -d '[0-9]')
WITH_LETTER=$(mktemp) # subset containing letter
# cp $BASH_SOURCE.full $MATCHES #  comment for strict rules
for letter in $letters; do # if letter has matches, use them as new subset
    grep $letter $MATCHES >$WITH_LETTER && mv $WITH_LETTER $MATCHES
done
head -1 $MATCHES # suggested guess

# clean up
rm -f $WITH_LETTER $MATCHES